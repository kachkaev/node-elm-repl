module.exports = [
    '',
    'Node-Elm-REPL.',
    '',
    'Prepare a file and put all your elm expressions there, line by line',
    'If you need imports, list them in the first line starting with `;` and splitting them with `;`',
    '',
    'For example (the contents of `src/cli-example`):',
    '',
    ';List as L;Maybe exposing ( Maybe(..) );String',
    'L.map',
    'L.foldl',
    'Just',
    'Nothing',
    '1 + 1',
    '\\a b -> a + b',
    '',
    'Then run `node src/cli.js --from <your-file-name>`',
    '',
    'And you should get:',
    '',
    '(a -> b) -> List a -> List b',
    '(a -> b -> b) -> b -> List a -> b',
    'a -> Maybe.Maybe a',
    'Maybe.Maybe a',
    'number',
    'number -> number -> number',
    '',
    'Other options:',
    // '--from-module — specify a module name to extract all the types, imports and exports from it (should be used as a replacement of --from)',
    '--work-dir — specify working directory for execution, for example where the `.elm` files you use are located',
    '--elm-ver — exact elm-version you use (default: 0.18.0), required to be known if you import your own modules',
    '--user — your username specified in elm-package.json (default: user), required to be known if you import your own modules',
    '--package — your project specified in elm-package.json (default: project), required to be known if you import your own modules',
    '--package-ver — your project version specified in elm-package.json (default: 1.0.0), required to be known if you import your own modules',
    '--show-time — show how much time it took to convert everyting',
    '--with-values — include values into the output (takes more time to extract them)',
    '--only-values — report and extract only values, not the types (overrides --with-values)',
    '--values-below — has sense only when --with-values was used: instead of putting types and values in lines like TYPE<TAB>VALUE, put a list of values line-by-line below the list of types: could be useful for parsing (has no effect with JSON output)',
    '--temp-file-name — specify file name of the generated Elm code',
    // '--json — do not stringify the result, output to the JSON',
    // console.log('--ksy — use Kaitai parser instead of binary one');
    ''
];
